AWSTemplateFormatVersion: "2010-09-09"
Description: "Nested CloudFormation stack for AssetView 2.0"
Parameters:
  VpcId:
    Type: String
    Description: "Id of the VPC to use"
  ECSClusterName:
    Type: String
    Description: "Name of the ECS Cluster"
  PMAssetViewWebUI:
    Type: String
    Description: "Backend Consumer Data image URI"
  PMAssetViewProperty:
    Type: String
    Description: "Backend Consumer Event image URI"
  Nginx:
    Type: String
    Description: "frontend app image URI"
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select atleast two private subnets in your selected VPC.
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select atleast two public subnets in your selected VPC for the ALB.
  LogGroupName:
    Type: String
    Description: Log Group Name for ECS Service
  # SslCert:
  #   Type: String
  #   Description: SSL Cert for HTTPS listener
  Environment:
    Type: String
    Description: "Environment for the stack"
  AVECSTaskRole:
    Type: String
    Description: "ECS task exec role"

Resources:
  PMAVEcsSecurityGroup:   ## this need to allow HTTP and HTTPS traffic from 0.0.0.0/0
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS and ALB Security Group  ## Will need to separate this 
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
          - CidrIp: 10.0.0.0/8
            IpProtocol: -1     # This needs to change for AV2.0
          - FromPort: '80'
            IpProtocol: tcp
            ToPort: '80'
            CidrIp: 0.0.0.0/0
          - FromPort: '443'
            IpProtocol: tcp
            ToPort: '443'
            CidrIp: 0.0.0.0/0
  PMAVEcsSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'PMAVEcsSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PMAVEcsSecurityGroup'

## ALB Target groups
  PMAVWebUITG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: PMAVALoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /   # check for AV2.0 specific endpoint for the health check
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join [ '-', [ pm-av-webui-tg, !Ref Environment] ]
      Port: 80  # will change with nginx implementation
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'
      TargetType: ip

  PMAVPropertyTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: PMAVALoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /     # check for AV2.0 specific endpoint for the health check
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join [ '-', [ pm-av-property-tg, !Ref Environment] ]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'
      TargetType: ip

 
#ALB Listeners
  # PMAVALoadBalancerHTTPListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   DependsOn:
  #     - PMAVALoadBalancer
  #   Properties:
  #     DefaultActions:
  #       - RedirectConfig:
  #           Host: "#{host}"
  #           Path: "/#{path}"
  #           Port: 443
  #           Protocol: "HTTPS"
  #           Query: "#{query}"
  #           StatusCode: HTTP_301
  #         Type: redirect
  #     LoadBalancerArn: !Ref 'PMAVALoadBalancer'
  #     Port: '80'
  #     Protocol: HTTP

  PMAVALoadBalancerHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PMAVALoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'PMAVWebUITG'
          Type: forward
      LoadBalancerArn: !Ref 'PMAVALoadBalancer'
      Port: '80'
      Protocol: HTTP
      # Certificates:
      #   - CertificateArn: !Ref 'SslCert'

  PMAVWebUILoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: PMAVALoadBalancerHTTPListener
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'PMAVWebUITG'
        Type: forward
      Conditions:
        - Field: host-header
          Values:
            - propertypulse-dev.cbre.com
      ListenerArn: !Ref 'PMAVALoadBalancerHTTPListener'
      Priority: 1

  PMAVPropertyLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: PMAVALoadBalancerHTTPListener
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'PMAVPropertyTG'
        Type: forward
      Conditions:
        - Field: host-header
          Values:
            - propertypulse-property-dev.cbre.com
      ListenerArn: !Ref 'PMAVALoadBalancerHTTPListener'
      Priority: 2


  PMAVALoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join [ '-', [ pm-assetview-alb, !Ref Environment ] ]
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: !Ref 'PublicSubnetIds'
      SecurityGroups: [!Ref 'PMAVEcsSecurityGroup']

  LogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Join [ '-', [!Ref LogGroupName, !Ref Environment] ]
      RetentionInDays: 7

  ECSCLUSTER:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Join [ '-', [!Ref ECSClusterName, !Ref Environment] ]
              
  PMASWebUIAppTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Cpu: '512'
      Memory: '1024'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: 'awsvpc'
      ExecutionRoleArn: !Ref AVECSTaskRole
      ContainerDefinitions:
        - Name: 'pm-av-webui-app'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              'awslogs-region': !Ref 'AWS::Region'
              'awslogs-group': !Ref LogGroup
              'awslogs-stream-prefix': !Ref 'AWS::StackName'
          Image: !Join [ ':', [!Ref PMAssetViewWebUI, !Ref Environment] ]
          Essential: 'true'
          PortMappings:
          - ContainerPort: 80

  PMASWebUIApp:
    Type: "AWS::ECS::Service"
    DependsOn: PMAVALoadBalancerHTTPListener
    Properties:
      Cluster: !Ref ECSCLUSTER
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      LoadBalancers:
      - ContainerName: pm-av-webui-app
        ContainerPort: 80
        TargetGroupArn: !Ref 'PMAVWebUITG'
      DesiredCount: 0
      LaunchType: FARGATE
      ServiceName: 'pm-av-webui-app'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref 'PMAVEcsSecurityGroup'
          Subnets: !Ref 'SubnetIds'
          AssignPublicIp: DISABLED
      TaskDefinition: !Ref PMASWebUIAppTaskDefinition


  PMASPropertyTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Cpu: '512'
      Memory: '1024'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: 'awsvpc'
      ExecutionRoleArn: !Ref AVECSTaskRole
      ContainerDefinitions:
        - Name: 'pm-av-property-nginx'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              'awslogs-region': !Ref 'AWS::Region'
              'awslogs-group': !Ref LogGroup
              'awslogs-stream-prefix': !Ref 'AWS::StackName'
          Image: !Ref Nginx
          Essential: 'true'
          PortMappings:
          - ContainerPort: 80
        - Name: 'pm-av-property-app'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              'awslogs-region': !Ref 'AWS::Region'
              'awslogs-group': !Ref LogGroup
              'awslogs-stream-prefix': !Ref 'AWS::StackName'
          Image: !Join [ ':', [!Ref PMAssetViewProperty, !Ref Environment] ]
          Essential: 'true'

  PMASPropertyApp:
    Type: "AWS::ECS::Service"
    DependsOn: PMAVALoadBalancerHTTPListener
    Properties:
      Cluster: !Ref ECSCLUSTER
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      LoadBalancers:
      - ContainerName: pm-av-property-nginx
        ContainerPort: 80
        TargetGroupArn: !Ref PMAVPropertyTG
      DesiredCount: 0
      LaunchType: FARGATE
      ServiceName: 'pm-av-property-app'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref 'PMAVEcsSecurityGroup'
          Subnets: !Ref 'SubnetIds'
          AssignPublicIp: DISABLED
      TaskDefinition: !Ref PMASPropertyTaskDefinition
